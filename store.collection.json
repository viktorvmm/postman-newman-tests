{
	"info": {
		"_postman_id": "5cbb74fb-e5d4-4bdc-be59-06245f5adbc7",
		"name": "store.collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43130951",
		"_collection_link": "https://martian-astronaut-407407.postman.co/workspace/Ringostat-API-Test-Collection~e504a06d-e759-4260-846c-35047c1eefd6/collection/43130951-5cbb74fb-e5d4-4bdc-be59-06245f5adbc7?action=share&source=collection_link&creator=43130951"
	},
	"item": [
		{
			"name": "Products Copy",
			"item": [
				{
					"name": "List products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.expect(response).to.be.an('array');\r",
									"\r",
									"\r",
									"response.forEach(product => {\r",
									"  \r",
									"    pm.expect(product).to.have.property('id');\r",
									"    pm.expect(product.id).to.be.a('number');\r",
									"\r",
									"    pm.expect(product).to.have.property('name');\r",
									"    pm.expect(product.name).to.be.a('string');\r",
									"\r",
									"    pm.expect(product).to.have.property('price');\r",
									"    pm.expect(product.price).to.be.a('number');\r",
									"\r",
									"    pm.expect(product).to.have.property('sku');\r",
									"    pm.expect(product.sku).to.be.a('number');\r",
									"\r",
									"    pm.expect(product).to.have.property('description');\r",
									"    pm.expect(product.description).to.be.a('string');\r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.expect(response).to.have.all.keys('id', 'name', 'price', 'sku', 'description');\r",
									"\r",
									"\r",
									"pm.expect(response.id).to.be.a('number');\r",
									"pm.expect(response.name).to.be.a('string');\r",
									"pm.expect(response.price).to.be.a('number');\r",
									"pm.expect(response.sku).to.be.a('number');\r",
									"pm.expect(response.description).to.be.a('string');\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"// Test for response body structure\r",
									"pm.test(\"Response body has correct properties\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.all.keys('id', 'name', 'price', 'sku', 'description');\r",
									"});\r",
									"\r",
									"\r",
									"// Test for price property in response body\r",
									"pm.test(\"Price property is correct\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.price).to.eql(8);\r",
									"});\r",
									"\r",
									"// Test for sku property in response body\r",
									"pm.test(\"SKU property is correct\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.sku).to.eql(123321123);\r",
									"});\r",
									"\r",
									"// Test for description property in response body\r",
									"pm.test(\"Description property is correct\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.description).to.eql(\"wouh\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains expected properties\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.property(\"id\", 8);\r",
									"    pm.expect(responseBody).to.have.property(\"name\", \"makaron\");\r",
									"    pm.expect(responseBody).to.have.property(\"price\", 8);\r",
									"    pm.expect(responseBody).to.have.property(\"sku\", 123321123);\r",
									"    pm.expect(responseBody).to.have.property(\"description\", \"wouh\");\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"makaron\",\r\n    \"price\": 8,\r\n    \"sku\": 123321123,\r\n    \"description\": \"wouh\",\r\n    \"id\" : 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"// Test for response body properties\r",
									"pm.test(\"Response body contains expected properties\", () => {\r",
									"    pm.expect(response).to.have.all.keys('name', 'price', 'sku', 'description', 'id');\r",
									"});\r",
									"\r",
									"// Test for property types\r",
									"pm.test(\"Response properties have correct types\", () => {\r",
									"    pm.expect(response.name).to.be.a('string');\r",
									"    pm.expect(response.price).to.be.a('number');\r",
									"    pm.expect(response.sku).to.be.a('number');\r",
									"    pm.expect(response.description).to.be.a('string');\r",
									"    pm.expect(response.id).to.be.a('number');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"test\",\r\n    \"price\": 155,\r\n    \"sku\": 123321123,\r\n    \"description\": \"changed description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful deletion of a product\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "List orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic tests for the GET orders request\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Check if the response body is an array\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"// Additional test for content-type header\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 5,\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "List users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array');\r",
									"});\r",
									"pm.test(\"Each user object has required fields\", function () {\r",
									"    const response = pm.response.json();\r",
									"    response.forEach(user => {\r",
									"        pm.expect(user).to.have.all.keys('id', 'firstName', 'lastName', 'email', 'dateOfBirth', 'emailVerified', 'signUpDate', 'status', 'level');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.expect(pm.response.code).to.equal(200);\r",
									"\r",
									"// Test for response time\r",
									"pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"\r",
									"// Test for content-type header\r",
									"pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"\r",
									"// Test for required fields in the response\r",
									"const requiredFields = ['id', 'firstName', 'lastName', 'email', 'dateOfBirth', 'emailVerified', 'signUpDate', 'status', 'level'];\r",
									"requiredFields.forEach(field => {\r",
									"    pm.expect(response).to.have.property(field);\r",
									"});\r",
									"\r",
									"// Test for data types\r",
									"pm.expect(response.id).to.be.a('number');\r",
									"pm.expect(response.firstName).to.be.a('string');\r",
									"pm.expect(response.lastName).to.be.a('string');\r",
									"pm.expect(response.email).to.be.a('string');\r",
									"pm.expect(response.dateOfBirth).to.be.a('string');\r",
									"pm.expect(response.emailVerified).to.be.a('boolean');\r",
									"pm.expect(response.signUpDate).to.be.a('string');\r",
									"pm.expect(response.status).to.be.a('string');\r",
									"pm.expect(response.level).to.be.a('string');\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the response status code is 201 Created\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Check if the response time is less than 200ms\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Validate the response content-type header\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Check if the response body contains specific properties\r",
									"pm.test(\"Response body contains expected properties\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.property(\"id\");\r",
									"    pm.expect(responseBody).to.have.property(\"firstName\", \"Dream\");\r",
									"    pm.expect(responseBody).to.have.property(\"lastName\", \"Real\");\r",
									"    pm.expect(responseBody).to.have.property(\"email\", \"dream.real@gmail.com\");\r",
									"    pm.expect(responseBody).to.have.property(\"dateOfBirth\", \"2001-10-99\");\r",
									"    pm.expect(responseBody).to.have.property(\"emailVerified\", true);\r",
									"    pm.expect(responseBody).to.have.property(\"signUpDate\", \"2019-08-24\");\r",
									"    pm.expect(responseBody).to.have.property(\"status\", \"active\");\r",
									"    pm.expect(responseBody).to.have.property(\"level\", \"lord\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Dream\",\r\n    \"lastName\": \"Real\",\r\n    \"email\": \"dream.real@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains the updated user data\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('firstName').that.is.a('string');\r",
									"    pm.expect(responseData).to.have.property('lastName').that.is.a('string');\r",
									"    pm.expect(responseData).to.have.property('email').that.is.a('string').and.includes('@');\r",
									"    pm.expect(responseData).to.have.property('dateOfBirth').that.is.a('string');\r",
									"    pm.expect(responseData).to.have.property('emailVerified').that.is.a('boolean');\r",
									"    pm.expect(responseData).to.have.property('signUpDate').that.is.a('string');\r",
									"    pm.expect(responseData).to.have.property('status').that.is.a('string');\r",
									"    pm.expect(responseData).to.have.property('level').that.is.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 3,\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Smith\",\r\n    \"email\": \"joe.smith@gmail.com\",\r\n    \"dateOfBirth\": \"1997-10-31\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"consumer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"10"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}